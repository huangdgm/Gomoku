/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nz.ac.aut.gui;

import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JOptionPane;
import nz.ac.aut.model.GameEventListener;
import nz.ac.aut.model.Game;
import nz.ac.aut.model.ChessBoard;
import nz.ac.aut.model.ChessColor;
import nz.ac.aut.model.ChessPoint;

/**
 *
 * @author Dong Huang
 */
public class GomokuGUI extends javax.swing.JFrame implements GameEventListener {

    /**
     * Creates new form GomokuGUI
     *
     * @param game
     */
    public GomokuGUI(Game game) {
        this.game = game;

        initComponents();
        initializeChessBoard();

        // As the GomokuGUI instance is created after the creation of the 
        // instance of the Game class, we need to pass the game event listener 
        // to the game instance outside of the game class.
        game.setGameEventListener(this);

        update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelContent = new javax.swing.JPanel();
        panelControl = new javax.swing.JPanel();
        iconBlack = new javax.swing.JLabel();
        scoreBlack = new javax.swing.JLabel();
        iconColon = new javax.swing.JLabel();
        scoreWhite = new javax.swing.JLabel();
        iconWhite = new javax.swing.JLabel();
        panelChessBoard = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemNewGame = new javax.swing.JMenuItem();
        menuOpenGame = new javax.swing.JMenu();
        menuItemSaveGame = new javax.swing.JMenuItem();
        menuItemSeparator = new javax.swing.JPopupMenu.Separator();
        menuItemExit = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuItemHelpContents = new javax.swing.JMenuItem();
        menuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Gomoku");
        setPreferredSize(new java.awt.Dimension(800, 920));
        setResizable(false);
        setSize(new java.awt.Dimension(620, 680));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelContent.setPreferredSize(new java.awt.Dimension(528, 660));
        panelContent.setLayout(new java.awt.BorderLayout());

        panelControl.setBackground(new java.awt.Color(255, 255, 255));
        panelControl.setLayout(new java.awt.GridLayout(1, 0));

        iconBlack.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconBlack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/black.PNG"))); // NOI18N
        panelControl.add(iconBlack);

        scoreBlack.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        scoreBlack.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBlack.setText("0");
        panelControl.add(scoreBlack);

        iconColon.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        iconColon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconColon.setText(":");
        panelControl.add(iconColon);

        scoreWhite.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        scoreWhite.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreWhite.setText("0");
        panelControl.add(scoreWhite);

        iconWhite.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconWhite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/white.png"))); // NOI18N
        panelControl.add(iconWhite);

        panelContent.add(panelControl, java.awt.BorderLayout.PAGE_END);

        panelChessBoard.setBackground(new java.awt.Color(255, 255, 255));
        panelChessBoard.setPreferredSize(new java.awt.Dimension(528, 612));

        javax.swing.GroupLayout panelChessBoardLayout = new javax.swing.GroupLayout(panelChessBoard);
        panelChessBoard.setLayout(panelChessBoardLayout);
        panelChessBoardLayout.setHorizontalGroup(
            panelChessBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 385, Short.MAX_VALUE)
        );
        panelChessBoardLayout.setVerticalGroup(
            panelChessBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 376, Short.MAX_VALUE)
        );

        panelContent.add(panelChessBoard, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelContent, java.awt.BorderLayout.CENTER);

        menuFile.setText("File");

        menuItemNewGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuItemNewGame.setText("New Game");
        menuItemNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewGameActionPerformed(evt);
            }
        });
        menuFile.add(menuItemNewGame);

        menuOpenGame.setText("Open Game");
        menuFile.add(menuOpenGame);

        menuItemSaveGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuItemSaveGame.setText("Save Game");
        menuFile.add(menuItemSaveGame);
        menuFile.add(menuItemSeparator);

        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExit);

        menuBar.add(menuFile);

        menuHelp.setText("Help");

        menuItemHelpContents.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuItemHelpContents.setText("Help Contents");
        menuHelp.add(menuItemHelpContents);

        menuItemAbout.setText("About");
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });
        menuHelp.add(menuItemAbout);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutActionPerformed
        JOptionPane.showMessageDialog(
                this,
                "Gomoku - v1.1\n\nAuthor: Dong Huang\nEmail:   huangdgm@gmail.com",
                "About",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuItemAboutActionPerformed

    private void menuItemNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewGameActionPerformed
        int userChoice;

        if (game.isChessBoardEmpty()) {
            game.createNewGame();
            update();
        } else {
            userChoice = JOptionPane.showConfirmDialog(
                    this,
                    "The game is currently going. Save?",
                    "Question",
                    JOptionPane.YES_NO_CANCEL_OPTION);

            switch (userChoice) {
                case JOptionPane.YES_OPTION:
                    String tableName = JOptionPane.showInputDialog(
                            this,
                            "Please input a name.",
                            "Question",
                            JOptionPane.OK_CANCEL_OPTION);

                    game.saveGame(tableName);
                    addNewMenuItem(tableName);
                    game.createNewGame();
                    update();

                    break;
                case JOptionPane.NO_OPTION:
                    game.createNewGame();
                    update();

                    break;
                case JOptionPane.CANCEL_OPTION:
                    break;
            }
        }
    }//GEN-LAST:event_menuItemNewGameActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int userChoice;

        if (game.isChessBoardEmpty()) {
            this.dispose();
        } else {
            userChoice = JOptionPane.showConfirmDialog(
                    this,
                    "The game is currently going. Save?",
                    "Question",
                    JOptionPane.YES_NO_CANCEL_OPTION);

            switch (userChoice) {
                case JOptionPane.YES_OPTION:
                    String tableName = JOptionPane.showInputDialog(
                            this,
                            "Please input a name.",
                            "Question",
                            JOptionPane.OK_CANCEL_OPTION);

                    game.saveGame(tableName);
                    addNewMenuItem(tableName);
                    this.dispose();

                    break;
                case JOptionPane.NO_OPTION:
                    this.dispose();

                    break;
                case JOptionPane.CANCEL_OPTION:
                    break;
            }
        }
    }//GEN-LAST:event_formWindowClosing

    @Override
    public void gameStateChanged() {
        update();

        if (!game.isCurrentChessPointValid()) {
            JOptionPane.showMessageDialog(
                    this,
                    "The chess point you just played is not valid.", "Warning",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Pop up a dialog to show who wins
            if (game.getJudge().isGameOver(game.getChessBoard().getCurrentChessPoint())) {
                if (game.getJudge().isBlackWin()) {
                    JOptionPane.showMessageDialog(
                            this,
                            "Black wins!", "Game over",
                            JOptionPane.INFORMATION_MESSAGE);

                    game.createNewGame();
                } else if (game.getJudge().isWhiteWin()) {
                    JOptionPane.showMessageDialog(
                            this,
                            "White wins!", "Game over",
                            JOptionPane.INFORMATION_MESSAGE);

                    game.createNewGame();
                }
            }
        }
    }

    /**
     * Update the GUI of chess board and score result.
     */
    private void update() {
        // update the whole chess board
        Component[] components = panelChessBoard.getComponents();

        for (Component comp : components) {
            ChessPointPanel cpp = (ChessPointPanel) comp;
            cpp.update();
        }

        // update the score result
        scoreBlack.setText(String.valueOf(game.getJudge().getScoreBlack()));
        scoreWhite.setText(String.valueOf(game.getJudge().getScoreWhite()));
    }

    private void initializeChessBoard() {
        panelChessBoard.setLayout(new GridLayout(ChessBoard.NUM_OF_ROWS, ChessBoard.NUM_OF_COLS));

        for (int row = 0; row < ChessBoard.NUM_OF_ROWS; row++) {
            for (int column = 0; column < ChessBoard.NUM_OF_COLS; column++) {
                ChessPointPanel cpp = new ChessPointPanel(game, row, column);

                // Add a mouse listener for all the chess point panel
                cpp.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent evt) {
                        mouseClickedActionPerformed(evt);
                    }
                });

                // Addd all the chess point panel to the chess board
                panelChessBoard.add(cpp);
            }
        }
    }

    private void mouseClickedActionPerformed(MouseEvent evt) {
        // Create a new chess point panel after the mouse click
        ChessPointPanel cpp = (ChessPointPanel) evt.getSource();

        int row = cpp.getRow();
        int column = cpp.getColumn();

        ChessColor cc = game.getJudge().isBlackTurn() ? ChessColor.BLACK : ChessColor.WHITE;
        ChessPoint currentChessPoint = new ChessPoint(row, column, cc);

        System.out.println(currentChessPoint);

        game.placeChessPoint(currentChessPoint);
    }

    private final Game game;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel iconBlack;
    private javax.swing.JLabel iconColon;
    private javax.swing.JLabel iconWhite;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItemAbout;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemHelpContents;
    private javax.swing.JMenuItem menuItemNewGame;
    private javax.swing.JMenuItem menuItemSaveGame;
    private javax.swing.JPopupMenu.Separator menuItemSeparator;
    private javax.swing.JMenu menuOpenGame;
    private javax.swing.JPanel panelChessBoard;
    private javax.swing.JPanel panelContent;
    private javax.swing.JPanel panelControl;
    private javax.swing.JLabel scoreBlack;
    private javax.swing.JLabel scoreWhite;
    // End of variables declaration//GEN-END:variables

    private void addNewMenuItem(String tableName) {
        javax.swing.JMenuItem newMenuItem = new javax.swing.JMenuItem();
        
        newMenuItem.setText(tableName);
        menuOpenGame.add(newMenuItem);
        
        menuBar.revalidate();
    }
}
