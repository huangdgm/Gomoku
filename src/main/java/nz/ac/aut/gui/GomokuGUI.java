/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nz.ac.aut.gui;

import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JOptionPane;
import nz.ac.aut.model.GameEventListener;
import nz.ac.aut.model.Game;
import nz.ac.aut.model.ChessBoard;
import nz.ac.aut.model.ChessColor;
import nz.ac.aut.model.ChessPoint;

/**
 *
 * @author xfn
 */
public class GomokuGUI extends javax.swing.JFrame implements GameEventListener {

    /**
     * Creates new form GomokuGUI
     */
    public GomokuGUI(Game game) {
        this.game = game;

        initComponents();
        initializeChessBoard();

        game.setGameEventListener(this);

        update();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelContent = new javax.swing.JPanel();
        panelControl = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        scoreBlack = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        scoreWhite = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        panelChessBoard = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gomoku");
        setPreferredSize(new java.awt.Dimension(620, 660));
        setResizable(false);
        setSize(new java.awt.Dimension(620, 660));

        panelContent.setLayout(new java.awt.BorderLayout());

        panelControl.setBackground(new java.awt.Color(255, 255, 255));
        panelControl.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/black.PNG"))); // NOI18N
        panelControl.add(jLabel1);

        scoreBlack.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        scoreBlack.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBlack.setText("0");
        panelControl.add(scoreBlack);

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText(":");
        panelControl.add(jLabel3);

        scoreWhite.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        scoreWhite.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreWhite.setText("0");
        panelControl.add(scoreWhite);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/white.png"))); // NOI18N
        panelControl.add(jLabel2);

        panelContent.add(panelControl, java.awt.BorderLayout.PAGE_END);

        panelChessBoard.setBackground(new java.awt.Color(255, 255, 255));
        panelChessBoard.setPreferredSize(new java.awt.Dimension(528, 528));

        javax.swing.GroupLayout panelChessBoardLayout = new javax.swing.GroupLayout(panelChessBoard);
        panelChessBoard.setLayout(panelChessBoardLayout);
        panelChessBoardLayout.setHorizontalGroup(
            panelChessBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 746, Short.MAX_VALUE)
        );
        panelChessBoardLayout.setVerticalGroup(
            panelChessBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 643, Short.MAX_VALUE)
        );

        panelContent.add(panelChessBoard, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelContent, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void gameStateChanged() {
        update();

        if (!game.isCurrentChessPointValid()) {
            JOptionPane.showMessageDialog(
                    this,
                    "The chess point you just played is not valid.", "Warning",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Pop up a dialog to show who wins
            if (game.getJudge().isGameOver(game.getChessBoard().getCurrentChessPoint())) {
                if (game.getJudge().isBlackWin()) {
                    JOptionPane.showMessageDialog(
                            this,
                            "Black wins!", "Game over",
                            JOptionPane.INFORMATION_MESSAGE);
                    
                    scoreBlack.setText(String.valueOf(game.getJudge().getScoreBlack()));
                    game.createNewGame();
                } else if (game.getJudge().isWhiteWin()) {
                    JOptionPane.showMessageDialog(
                            this,
                            "White wins!", "Game over",
                            JOptionPane.INFORMATION_MESSAGE);
                    
                    scoreWhite.setText(String.valueOf(game.getJudge().getScoreWhite()));
                    game.createNewGame();
                }
            }
        }
    }

    private void update() {
        // update each chess point panel
        Component[] components = panelChessBoard.getComponents();

        for (Component comp : components) {
            ChessPointPanel cpp = (ChessPointPanel) comp;
            cpp.update();
        }

        // update the panelControl info
    }

    private void initializeChessBoard() {
        panelChessBoard.setLayout(new GridLayout(ChessBoard.NUM_OF_ROWS, ChessBoard.NUM_OF_COLS));

        for (int row = 0; row < ChessBoard.NUM_OF_ROWS; row++) {
            for (int column = 0; column < ChessBoard.NUM_OF_COLS; column++) {
                ChessPointPanel cpp = new ChessPointPanel(game, row, column);

                // Add a mouse listener for all the chess point panel
                cpp.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent evt) {
                        mouseClickedActionPerformed(evt);
                    }
                });

                // Addd all the chess point panel to the chess board
                panelChessBoard.add(cpp);
            }
        }
    }

    private void mouseClickedActionPerformed(MouseEvent evt) {
        // Create a new chess point panel after the mouse click
        ChessPointPanel cpp = (ChessPointPanel) evt.getSource();

        int row = cpp.getRow();
        int column = cpp.getColumn();

        ChessColor cc = game.getJudge().isBlackTurn() ? ChessColor.BLACK : ChessColor.WHITE;
        ChessPoint currentChessPoint = new ChessPoint(row, column, cc);

        System.out.println(currentChessPoint);

        game.placeChessPoint(currentChessPoint);
    }

    private Game game;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel panelChessBoard;
    private javax.swing.JPanel panelContent;
    private javax.swing.JPanel panelControl;
    private javax.swing.JLabel scoreBlack;
    private javax.swing.JLabel scoreWhite;
    // End of variables declaration//GEN-END:variables
}
