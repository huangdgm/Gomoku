package nz.ac.aut.gui;

import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import nz.ac.aut.model.GameEventListener;
import nz.ac.aut.model.Game;
import nz.ac.aut.model.ChessBoard;
import nz.ac.aut.model.ChessColor;
import nz.ac.aut.model.ChessPoint;

/**
 * This GUI class represents the main Gomoku game window.
 *
 * @author Dong Huang
 */
public class GomokuGUI extends javax.swing.JFrame implements GameEventListener {

    /**
     * Creates new form GomokuGUI
     *
     * @param game
     */
    public GomokuGUI(Game game) {
        this.game = game;

        initComponents();
        initializeChessBoard();

        // As the GomokuGUI instance is created after the creation of the 
        // instance of the Game class, we need to pass the game event listener 
        // to the game instance outside of the game class.
        game.setGameEventListener(this);

        update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelContent = new javax.swing.JPanel();
        panelControl = new javax.swing.JPanel();
        iconBlack = new javax.swing.JLabel();
        iconBlackTurn = new javax.swing.JLabel();
        scoreBlack = new javax.swing.JLabel();
        iconColon = new javax.swing.JLabel();
        scoreWhite = new javax.swing.JLabel();
        iconWhiteTurn = new javax.swing.JLabel();
        iconWhite = new javax.swing.JLabel();
        panelChessBoard = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemNewGame = new javax.swing.JMenuItem();
        menuOpenRecentGame = new javax.swing.JMenu();
        menuItemSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuItemSave = new javax.swing.JMenuItem();
        menuItemSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuItemExit = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuItemHelpContents = new javax.swing.JMenuItem();
        menuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Gomoku - " + game.getCurrentGameName());
        setPreferredSize(new java.awt.Dimension(800, 920));
        setResizable(false);
        setSize(new java.awt.Dimension(620, 680));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelContent.setPreferredSize(new java.awt.Dimension(528, 660));
        panelContent.setLayout(new java.awt.BorderLayout());

        panelControl.setBackground(new java.awt.Color(255, 255, 255));
        panelControl.setLayout(new java.awt.GridLayout(1, 0));

        iconBlack.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconBlack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/black.PNG"))); // NOI18N
        panelControl.add(iconBlack);

        iconBlackTurn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconBlackTurn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/left_arrow.png"))); // NOI18N
        panelControl.add(iconBlackTurn);

        scoreBlack.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        scoreBlack.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreBlack.setText("0");
        panelControl.add(scoreBlack);

        iconColon.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        iconColon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconColon.setText(":");
        panelControl.add(iconColon);

        scoreWhite.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        scoreWhite.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreWhite.setText("0");
        panelControl.add(scoreWhite);

        iconWhiteTurn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconWhiteTurn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/right_arrow.png"))); // NOI18N
        panelControl.add(iconWhiteTurn);

        iconWhite.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconWhite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/white.png"))); // NOI18N
        panelControl.add(iconWhite);

        panelContent.add(panelControl, java.awt.BorderLayout.PAGE_END);

        panelChessBoard.setBackground(new java.awt.Color(255, 255, 255));
        panelChessBoard.setPreferredSize(new java.awt.Dimension(528, 612));

        javax.swing.GroupLayout panelChessBoardLayout = new javax.swing.GroupLayout(panelChessBoard);
        panelChessBoard.setLayout(panelChessBoardLayout);
        panelChessBoardLayout.setHorizontalGroup(
            panelChessBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 567, Short.MAX_VALUE)
        );
        panelChessBoardLayout.setVerticalGroup(
            panelChessBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 379, Short.MAX_VALUE)
        );

        panelContent.add(panelChessBoard, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelContent, java.awt.BorderLayout.CENTER);

        menuFile.setText("    File  ");

        menuItemNewGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuItemNewGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/empty_chess_point.png"))); // NOI18N
        menuItemNewGame.setText("New Game");
        menuItemNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewGameActionPerformed(evt);
            }
        });
        menuFile.add(menuItemNewGame);

        menuOpenRecentGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/black_chess_point.png"))); // NOI18N
        menuOpenRecentGame.setText("Open Recent Game");

        // Add the existing game in the database to the menu
        addExistingGameToMenuOpenRecentGame();

        menuFile.add(menuOpenRecentGame);
        menuFile.add(menuItemSeparator1);

        menuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuItemSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/save_icon.png"))); // NOI18N
        menuItemSave.setText("Save");
        menuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveActionPerformed(evt);
            }
        });
        menuFile.add(menuItemSave);
        menuFile.add(menuItemSeparator2);

        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExit);

        menuBar.add(menuFile);

        menuHelp.setText("  Help    ");

        menuItemHelpContents.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuItemHelpContents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/help_icon.png"))); // NOI18N
        menuItemHelpContents.setText("Help Contents        ");
        menuItemHelpContents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemHelpContentsActionPerformed(evt);
            }
        });
        menuHelp.add(menuItemHelpContents);

        menuItemAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/about_icon.png"))); // NOI18N
        menuItemAbout.setText("About");
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });
        menuHelp.add(menuItemAbout);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        saveAndExit();
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutActionPerformed
        showAboutMessageDialog();
    }//GEN-LAST:event_menuItemAboutActionPerformed

    /**
     * When the new game menu item is clicked, the game will create a new game
     * for the player. If there are any unsaved changes, the game will first
     * prompt the player to save the current progress.
     *
     * @param evt
     */
    private void menuItemNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewGameActionPerformed
        if (game.isCurrentChessBoardChanged()) {
            int userChoice = showSaveConfirmDialog(this);

            switch (userChoice) {
                case JOptionPane.YES_OPTION:
                    if (game.getCurrentGameName().equals("Untitled")) {
                        String tableName = showSaveInputDialog(this);
                        // If the user enters a game name, then save the game, 
                        // otherwise, do nothing.
                        if (tableName != null && tableName.length() != 0) {
                            game.saveGame(game.getDatabaseManager(), tableName);
                            addNewGameToMenuItemOpenRecentGame(tableName);
                            game.createNewGame();
                        }
                    } else {
                        // No need to add a new menu, as the current game is from an existing game.
                        game.saveGame(game.getDatabaseManager(), game.getCurrentGameName());
                        game.createNewGame();
                    }

                    break;
                case JOptionPane.NO_OPTION:
                    game.createNewGame();

                    break;
                case JOptionPane.CANCEL_OPTION:
                    break;
            }
        } else {
            game.createNewGame();
        }
    }//GEN-LAST:event_menuItemNewGameActionPerformed

    /**
     * When the player clicks the close button of the main window, the game will
     * first save the game if there are unsaved changes, and then exit.
     *
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        saveAndExit();
    }//GEN-LAST:event_formWindowClosing

    /**
     * When the save menu item is clicked, the game will save the game while at
     * the same time will update the title of the main window accordingly.
     *
     * @param evt
     */
    private void menuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveActionPerformed
        String currentGameName = game.getCurrentGameName();

        if (currentGameName.equals("Untitled")) {
            String newGameName = showSaveInputDialog(this);

            if (newGameName != null && newGameName.length() != 0) {
                game.saveGame(game.getDatabaseManager(), newGameName);
                game.setCurrentGameName(newGameName);
                addNewGameToMenuItemOpenRecentGame(newGameName);
            }
        } else {
            game.saveGame(game.getDatabaseManager(), currentGameName);
        }
    }//GEN-LAST:event_menuItemSaveActionPerformed

    private void menuItemHelpContentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemHelpContentsActionPerformed
        StringBuilder sb = new StringBuilder();
        
        sb.append("Welcome to the GOMOKU world\n\n");
        sb.append("1. One player plays the BLACK, the other player plays the WHITE.\n");
        sb.append("2. BLACK plays first.\n");
        sb.append("3. The player who first places five points in a line wins the game.\n");
        sb.append("4. The player can terminate the game by clicking the close button on the window or clicking the exit menu item.\n");
        sb.append("5. The player can use the save menu item button to save the current progress of the game.\n");
        sb.append("6. The player can choose to recover a history game by clicking the menu item in the open recent game menu list.\n\n");
        
        JOptionPane.showMessageDialog(
                    this,
                    sb, "Play instruction",
                    JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuItemHelpContentsActionPerformed

    /**
     * This method will update the whole main window. Also, it can detect the
     * invalid chess point as well as detecting who win the game.
     */
    @Override
    public void gameStateChanged() {
        update();

        if (!game.isCurrentChessPointValid()) {
            JOptionPane.showMessageDialog(
                    this,
                    "The chess point you just played is invalid.", "Warning",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Pop up a dialog to show who wins
            if (game.getJudge().isGameOver(game.getChessBoard().getCurrentChessPoint())) {
                if (game.getJudge().isBlackWin()) {
                    JOptionPane.showMessageDialog(
                            this,
                            "Black wins!", "Game over",
                            JOptionPane.INFORMATION_MESSAGE);

                    game.createNewGame();
                } else if (game.getJudge().isWhiteWin()) {
                    JOptionPane.showMessageDialog(
                            this,
                            "White wins!", "Game over",
                            JOptionPane.INFORMATION_MESSAGE);

                    game.createNewGame();
                }
            }
        }
    }

    /**
     * This method can add the existing game from the database into the menu
     * list when the game first starts. This can help the player to recover from
     * the history progress easily.
     */
    private void addExistingGameToMenuOpenRecentGame() {
        for (String existingGameName : game.getDatabaseManager().convertResultSetToTableNameCollection(game.getDatabaseManager().getAllTableNames())) {
            JMenuItem menuItemExistingGame = new JMenuItem();
            menuItemExistingGame.setText(existingGameName);
            menuItemExistingGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/existing_game_icon.png")));

            menuItemExistingGame.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (game.isCurrentChessBoardChanged()) {
                        int userChoice = showSaveConfirmDialog(GomokuGUI.this);

                        switch (userChoice) {
                            case JOptionPane.YES_OPTION:
                                if (game.getCurrentGameName().equals("Untitled")) {
                                    String tableName = showSaveInputDialog(GomokuGUI.this);

                                    if (tableName != null && tableName.length() != 0) {
                                        game.saveGame(game.getDatabaseManager(), tableName);
                                        addNewGameToMenuItemOpenRecentGame(tableName);
                                        menuItemExistingGameActionPerformed(existingGameName);
                                    }

                                } else {
                                    game.saveGame(game.getDatabaseManager(), game.getCurrentGameName());
                                    menuItemExistingGameActionPerformed(existingGameName);
                                }

                                break;
                            case JOptionPane.NO_OPTION:
                                menuItemExistingGameActionPerformed(existingGameName);

                                break;
                            case JOptionPane.CANCEL_OPTION:
                                break;
                        }
                    } else {
                        menuItemExistingGameActionPerformed(existingGameName);
                    }
                }
            });

            menuOpenRecentGame.add(menuItemExistingGame);
        }
    }

    /**
     * Update the GUI of chess board:
     */
    private void update() {
        // Update the GUI of chess board
        Component[] components = panelChessBoard.getComponents();

        for (Component comp : components) {
            ChessPointPanel cpp = (ChessPointPanel) comp;
            cpp.update();
        }

        // Update the score result
        scoreBlack.setText(String.valueOf(game.getJudge().getScoreBlack()));
        scoreWhite.setText(String.valueOf(game.getJudge().getScoreWhite()));

        // Update the window title
        if (game.isCurrentChessBoardChanged()) {
            // If the game is unsaved, there is a "*" appended to the end of the game name.
            this.setTitle("Gomoku - " + game.getCurrentGameName() + "*");
        } else {
            this.setTitle("Gomoku - " + game.getCurrentGameName());
        }

        // Update the menu item for 'save' and 'save as'
        if (game.isCurrentChessBoardChanged()) {
            menuItemSave.setEnabled(true);
        } else {
            menuItemSave.setEnabled(false);
        }

        // Update the menu item for 'new game'
        if (game.isChessBoardEmpty()) {
            menuItemNewGame.setEnabled(false);
        } else {
            menuItemNewGame.setEnabled(true);
        }

        // Update the arrow direction
        if (game.isBlackTurn()) {
            iconBlackTurn.setVisible(true);
            iconWhiteTurn.setVisible(false);
        } else {
            iconBlackTurn.setVisible(false);
            iconWhiteTurn.setVisible(true);
        }

        // Update the menu item for the existing games
        for (Component menuItemExistingGame : menuOpenRecentGame.getPopupMenu().getComponents()) {
            String currentGameName = game.getCurrentGameName();
            String menuItemExistingGameName = ((JMenuItem) menuItemExistingGame).getText();

            if (menuItemExistingGameName.equalsIgnoreCase(currentGameName)) {
                menuItemExistingGame.setEnabled(false);
            } else {
                menuItemExistingGame.setEnabled(true);
            }
        }
    }

    /**
     * This method can initialize the whole chess board, while at the same time
     * can set the listener for all the chess point panel.
     */
    private void initializeChessBoard() {
        panelChessBoard.setLayout(new GridLayout(ChessBoard.NUM_OF_ROWS, ChessBoard.NUM_OF_COLS));

        for (int row = 0; row < ChessBoard.NUM_OF_ROWS; row++) {
            for (int column = 0; column < ChessBoard.NUM_OF_COLS; column++) {
                ChessPointPanel cpp = new ChessPointPanel(game, row, column);

                // Add a mouse listener for all the chess point panel
                cpp.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent evt) {
                        mouseClickedActionPerformed(evt);
                    }
                });

                // Addd all the chess point panel to the chess board
                panelChessBoard.add(cpp);
            }
        }
    }

    /**
     * The call-back function that will be invoked when a position in the chess
     * board is clicked.
     */
    private void mouseClickedActionPerformed(MouseEvent evt) {
        // Create a new chess point panel after the mouse click
        ChessPointPanel cpp = (ChessPointPanel) evt.getSource();

        int row = cpp.getRow();
        int column = cpp.getColumn();

        ChessColor cc = game.getJudge().isBlackTurn() ? ChessColor.BLACK : ChessColor.WHITE;
        ChessPoint currentChessPoint = new ChessPoint(row, column, cc);

        game.placeChessPoint(currentChessPoint);

        // For debug purpose
        System.out.println(currentChessPoint);
    }

    private void menuItemExistingGameActionPerformed(String tableName) {
        game.creatExistingGameFromTable(tableName);
    }

    /**
     * This method can help the player to create a new menu item under the open
     * recent game menu list when the game is going. It can help the player to
     * recover a previous game without having to exist the game.
     *
     * @param tableName
     */
    private void addNewGameToMenuItemOpenRecentGame(String tableName) {
        JMenuItem newMenuItem = new JMenuItem();

        newMenuItem.setText(tableName);
        newMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/existing_game_icon.png")));

        // Disable the menu item representing the current game if the current game is currently going.
        if (game.getCurrentGameName().equals(newMenuItem.getText())) {
            newMenuItem.setEnabled(false);
        }

        newMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                menuItemExistingGameActionPerformed(tableName);
            }
        });

        menuOpenRecentGame.add(newMenuItem);

        // Repaint the menu bar after adding a new menu item
        menuBar.revalidate();
    }

    private void saveAndExit() {
        String currentGameName = game.getCurrentGameName();

        if (!game.getAllGameNames(game.getDatabaseManager()).contains(currentGameName)) {
            // If it is a new game, then save it as a new game.
            saveGameAndExit("Untitled");
        } else {
            // If it is an existing game, then overwrite it.
            saveGameAndExit(currentGameName);
        }
    }

    private void showAboutMessageDialog() {
        JOptionPane.showMessageDialog(
                this,
                "Gomoku v2.0\n\nAuthor: Dong Huang\nEmail: huangdgm@gmail.com",
                "About",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private int showSaveConfirmDialog(Component parentComponent) {
        return JOptionPane.showConfirmDialog(
                parentComponent,
                "The game '" + game.getCurrentGameName() + "' is changed. Save?",
                "Question",
                JOptionPane.YES_NO_CANCEL_OPTION);
    }

    /**
     * Prompt the user to input the save currentGameName.
     *
     * @param parentComponent
     * @return The user input and the time stamp as a string.
     */
    private String showSaveInputDialog(Component parentComponent) {
        DateFormat dateFormatter = new SimpleDateFormat("yyyyMMddHHmmss");
        Date date = new Date();
        String userInput = null;
        String returnValue;

        // The show input dialog will show up over and over again if the user inputs nothing or invalid save name.
        do {
            if (userInput != null && !(userInput.matches("[a-zA-Z]+\\d*"))) {
                JOptionPane.showMessageDialog(parentComponent,
                        "Invalid save name.\n\nHint: one or more chars followed by zero or more digits.",
                        "Warning",
                        JOptionPane.OK_OPTION);
            }

            userInput = JOptionPane.showInputDialog(
                    parentComponent,
                    "Please input a save name:\nHint: one or more chars followed by zero or more digits.",
                    "Question",
                    JOptionPane.OK_CANCEL_OPTION);
        } while ((userInput != null && userInput.length() == 0) || (userInput != null && !(userInput.matches("[a-zA-Z]+\\d*"))));

        if (userInput == null) {
            returnValue = null;     // The user clicks 'cancel'
        } else {
            // Convert the letters in user input to upper case, since the database will convert the table name to all uppercase when storing table name
            returnValue = userInput.toUpperCase() + "_" + dateFormatter.format(date);
        }

        return returnValue;
    }

    /**
     * Save the current game and exit the program. During this process, the game
     * may prompt the player to enter a save name.
     *
     * @param currentGameName
     */
    private void saveGameAndExit(String currentGameName) {
        if (game.isCurrentChessBoardChanged()) {
            int userChoice = showSaveConfirmDialog(this);
            String tableName = currentGameName;

            switch (userChoice) {
                case JOptionPane.YES_OPTION:
                    if (tableName.equals("Untitled")) {
                        tableName = showSaveInputDialog(this);
                        // If the user enters a currentGameName, then save the game, 
                        // otherwise, do nothing.
                        if (tableName != null && tableName.length() != 0) {
                            game.saveGame(game.getDatabaseManager(), tableName);
                            this.dispose();
                        }
                    } else {
                        game.saveGame(game.getDatabaseManager(), currentGameName);
                        this.dispose();
                    }
                    
                    // Close the db connection.
                    try {
                        game.getDatabaseManager().getConn().close();
                    } catch (SQLException ex) {
                        Logger.getLogger(GomokuGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    break;
                case JOptionPane.NO_OPTION:
                    this.dispose();
                    
                    // Close the db connection.
                    try {
                        game.getDatabaseManager().getConn().close();
                    } catch (SQLException ex) {
                        Logger.getLogger(GomokuGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    break;
                case JOptionPane.CANCEL_OPTION:
                    break;
            }
        } else {
            // Close the window and exit.
            this.dispose();
            
            // Close the db connection.
            try {
                game.getDatabaseManager().getConn().close();
            } catch (SQLException ex) {
                Logger.getLogger(GomokuGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private final Game game;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel iconBlack;
    private javax.swing.JLabel iconBlackTurn;
    private javax.swing.JLabel iconColon;
    private javax.swing.JLabel iconWhite;
    private javax.swing.JLabel iconWhiteTurn;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItemAbout;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemHelpContents;
    private javax.swing.JMenuItem menuItemNewGame;
    private javax.swing.JMenuItem menuItemSave;
    private javax.swing.JPopupMenu.Separator menuItemSeparator1;
    private javax.swing.JPopupMenu.Separator menuItemSeparator2;
    private javax.swing.JMenu menuOpenRecentGame;
    private javax.swing.JPanel panelChessBoard;
    private javax.swing.JPanel panelContent;
    private javax.swing.JPanel panelControl;
    private javax.swing.JLabel scoreBlack;
    private javax.swing.JLabel scoreWhite;
    // End of variables declaration//GEN-END:variables
}
