package nz.ac.aut.gui;

import nz.ac.aut.model.ChessColor;
import nz.ac.aut.model.Game;

/**
 * This class represents a smallest area which can accept only a single piece of
 * chess point.
 *
 * @author Dong Huang
 */
public class ChessPointPanel extends javax.swing.JPanel {

    /**
     * Creates new form ChessPointPanel
     */
    public ChessPointPanel(Game game, int row, int column) {
        this.game = game;
        this.row = row;
        this.column = column;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chessPointLabel = new javax.swing.JLabel();

        chessPointLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        chessPointLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/empty_chess_point.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chessPointLabel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chessPointLabel)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Update the chess point label image based on the color of the chess point
     * or whether there is a chess point on the panel.
     */
    public void update() {
        if (game.getJudge().isChessExist(getRow(), getColumn(), ChessColor.BLACK)) {
            chessPointLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/black_chess_point.png")));
        } else if (game.getJudge().isChessExist(getRow(), getColumn(), ChessColor.WHITE)) {
            chessPointLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/white_chess_point.png")));
        } else {
            chessPointLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nz/ac/aut/resources/empty_chess_point.png")));
        }
    }

    /**
     * @return the row
     */
    public int getRow() {
        return row;
    }

    /**
     * @return the column
     */
    public int getColumn() {
        return column;
    }

    private Game game;
    private int row;
    private int column;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel chessPointLabel;
    // End of variables declaration//GEN-END:variables
}
